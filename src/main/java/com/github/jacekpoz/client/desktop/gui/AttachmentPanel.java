package com.github.jacekpoz.client.desktop.gui;

import com.github.jacekpoz.common.sendables.Attachment;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Locale;

public class AttachmentPanel {
    private JPanel attachmentPanel;
    private JLabel fileNameLabel;
    private JLabel fileSizeLabel;
    private JButton downloadButton;
    private JButton xButton;

    private JComponent parent;

    private Attachment attachment;
    private boolean isSent;

    public AttachmentPanel(JTextPane parent, Attachment a, boolean isSent) {
        this(a, isSent);
        this.parent = parent;
    }

    public AttachmentPanel(JPanel parent, Attachment a, boolean isSent) {
        this(a, isSent);
        this.parent = parent;
    }

    private AttachmentPanel(Attachment a, boolean isSent) {
        attachment = a;
        this.isSent = isSent;

        fileNameLabel.setText(attachment.getFullName());
        fileSizeLabel.setText(attachment.getFileContents().size() + " B");

        if (this.isSent) attachmentPanel.remove(xButton);
        else xButton.addActionListener(e -> removeThis());

        downloadButton.addActionListener(e -> {
            String downloadsDirectory = System.getenv("USERPROFILE") + "\\Downloads\\";
            String downloadPath = downloadsDirectory + a.getFullName();
            int i = 0;
            while (new File(downloadPath).exists()) {
                downloadPath = downloadsDirectory + a.getFileName() + '(' + ++i + ')' + '.' + a.getFileExtension();
            }

            try (FileWriter writer = new FileWriter(
                    downloadPath
            )) {
                for (Byte aByte : attachment.getFileContents())
                    writer.write(aByte);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        });
    }

    public void removeThis() {
        attachmentPanel.remove(fileNameLabel);
        attachmentPanel.remove(fileSizeLabel);
        attachmentPanel.remove(downloadButton);
        attachmentPanel.remove(xButton);
        parent.remove(attachmentPanel);
        parent.revalidate();
        parent.repaint();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        attachmentPanel = new JPanel();
        attachmentPanel.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        attachmentPanel.setBackground(new Color(-12829636));
        attachmentPanel.setForeground(new Color(-1));
        attachmentPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-1)), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        fileNameLabel = new JLabel();
        fileNameLabel.setBackground(new Color(-12829636));
        Font fileNameLabelFont = this.$$$getFont$$$("Comic Sans MS", -1, -1, fileNameLabel.getFont());
        if (fileNameLabelFont != null) fileNameLabel.setFont(fileNameLabelFont);
        fileNameLabel.setForeground(new Color(-1));
        fileNameLabel.setText("");
        attachmentPanel.add(fileNameLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fileSizeLabel = new JLabel();
        fileSizeLabel.setBackground(new Color(-12829636));
        fileSizeLabel.setEnabled(true);
        Font fileSizeLabelFont = this.$$$getFont$$$("Comic Sans MS", -1, -1, fileSizeLabel.getFont());
        if (fileSizeLabelFont != null) fileSizeLabel.setFont(fileSizeLabelFont);
        fileSizeLabel.setForeground(new Color(-1));
        fileSizeLabel.setText("");
        attachmentPanel.add(fileSizeLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        downloadButton = new JButton();
        downloadButton.setBackground(new Color(-12829636));
        downloadButton.setBorderPainted(false);
        downloadButton.setFocusPainted(false);
        Font downloadButtonFont = this.$$$getFont$$$("Comic Sans MS", -1, -1, downloadButton.getFont());
        if (downloadButtonFont != null) downloadButton.setFont(downloadButtonFont);
        downloadButton.setForeground(new Color(-1));
        downloadButton.setIcon(new ImageIcon(getClass().getResource("/images/download.png")));
        downloadButton.setText("");
        attachmentPanel.add(downloadButton, new GridConstraints(1, 1, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        xButton = new JButton();
        xButton.setBackground(new Color(-12829636));
        xButton.setBorderPainted(false);
        xButton.setFocusPainted(false);
        Font xButtonFont = this.$$$getFont$$$("Comic Sans MS", -1, -1, xButton.getFont());
        if (xButtonFont != null) xButton.setFont(xButtonFont);
        xButton.setForeground(new Color(-1));
        xButton.setIcon(new ImageIcon(getClass().getResource("/images/x.png")));
        xButton.setOpaque(true);
        xButton.setText("");
        attachmentPanel.add(xButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_NORTHEAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return attachmentPanel;
    }

}
